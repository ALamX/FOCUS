// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

model cad {
  id               String    @id @default(cuid())
  name             String    @db.VarChar(255)
  owner            User      @relation(fields: [ownerId], references: [id])
  ownerId          String
  areaOfPlay       String?   @db.VarChar(255)
  steamApiKey      String?   @db.VarChar(255)
  whitelisted      Boolean   @default(false)
  towWhitelisted   Boolean   @default(false)
  maxPlateLength   Int       @default(8)
  liveMapSocketURl String?   @db.VarChar(255)
  logoId           String?
  registrationCode String?
  disabledFeatures Feature[]
}

model User {
  id              String          @id @default(cuid())
  username        String          @unique @db.VarChar(255)
  password        String          @db.Text
  rank            Rank            @default(USER)
  isLeo           Boolean         @default(false)
  isSupervisor    Boolean         @default(false)
  isEmsFd         Boolean         @default(false)
  isDispatch      Boolean         @default(false)
  isTow           Boolean         @default(false)
  banned          Boolean         @default(false)
  banReason       String?
  avatarUrl       String?         @db.Text
  steamId         String?         @db.VarChar(255)
  whitelistStatus WhitelistStatus @default(ACCEPTED)

  // relational data
  citizens             Citizen[]
  cads                 cad[]
  vehicles             RegisteredVehicle[]
  weapons              Weapon[]
  notifications        Notification[]
  executedNotifictions Notification[]      @relation("executor")
  medicalRecords       MedicalRecord[]
  bleeterPosts         BleeterPost[]
  towCalls             TowCall[]
  businesses           Business[]
  businessPosts        BusinessPost[]
  Employee             Employee[]
}

model Citizen {
  id               String              @id @default(cuid())
  user             User                @relation(fields: [userId], references: [id])
  userId           String
  name             String              @db.VarChar(255)
  surname          String              @db.VarChar(255)
  dateOfBirth      DateTime
  gender           Value               @relation("genderToValue", fields: [genderId], references: [id])
  genderId         String
  ethnicity        Value               @relation("ethnicityToValue", fields: [ethnicityId], references: [id])
  ethnicityId      String
  hairColor        String              @db.VarChar(255)
  eyeColor         String              @db.VarChar(255)
  address          String              @db.VarChar(255)
  height           String              @db.VarChar(255)
  weight           String              @db.VarChar(255)
  driversLicense   Value?              @relation("driversLicenseToValue", fields: [driversLicenseId], references: [id])
  driversLicenseId String?
  weaponLicense    Value?              @relation("weaponLicenseToValue", fields: [weaponLicenseId], references: [id])
  weaponLicenseId  String?
  pilotLicense     Value?              @relation("pilotLicenseToValue", fields: [pilotLicenseId], references: [id])
  pilotLicenseId   String?
  ccw              Value?              @relation("ccwToValue", fields: [ccwId], references: [id])
  ccwId            String?
  imageId          String?             @db.Text
  note             String?             @db.Text
  dead             Boolean?            @default(false)
  dateOfDead       DateTime?
  vehicles         RegisteredVehicle[]
  weapons          Weapon[]
  medicalRecords   MedicalRecord[]
  towCalls         TowCall[]
  createdTowCalls  TowCall[]           @relation("towCallCreator")
  businesses       Business[]
  businessPosts    BusinessPost[]
  Employee         Employee[]
}

enum Rank {
  OWNER
  ADMIN
  MODERATOR
  USER
}

enum WhitelistStatus {
  ACCEPTED
  PENDING
  DECLINED
}

model RegisteredVehicle {
  id                   String   @id @default(cuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String
  citizen              Citizen  @relation(fields: [citizenId], references: [id])
  citizenId            String
  vinNumber            String   @unique @db.VarChar(255)
  plate                String   @unique @db.VarChar(255)
  model                Value    @relation("modelToValue", fields: [modelId], references: [id])
  modelId              String
  color                String   @db.VarChar(255)
  createdAt            DateTime @default(now())
  registrationStatus   Value    @relation("registrationStatusToValue", fields: [registrationStatusId], references: [id])
  registrationStatusId String
  insuranceStatus      String   @db.VarChar(255)
}

model Weapon {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  citizen   Citizen @relation(fields: [citizenId], references: [id])
  citizenId String

  serialNumber         String @unique @db.VarChar(255)
  registrationStatus   Value  @relation("weaponRegistrationStatusToValue", fields: [registrationStatusId], references: [id])
  registrationStatusId String
  model                Value  @relation("weaponModelToValue", fields: [modelId], references: [id])
  modelId              String
}

model MedicalRecord {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  citizen   Citizen @relation(fields: [citizenId], references: [id])
  citizenId String

  type        String @db.VarChar(255)
  description String @db.Text
}

// admin values
model Value {
  id        String    @id @default(cuid())
  type      ValueType
  value     String    @db.VarChar(255)
  isDefault Boolean

  // how to clean this up?!
  ethnicityToValue                Citizen[]           @relation("ethnicityToValue")
  genderToValue                   Citizen[]           @relation("genderToValue")
  driversLicenseToValue           Citizen[]           @relation("driversLicenseToValue")
  weaponLicenseToValue            Citizen[]           @relation("weaponLicenseToValue")
  pilotLicenseToValue             Citizen[]           @relation("pilotLicenseToValue")
  ccwToValue                      Citizen[]           @relation("ccwToValue")
  modelToValue                    RegisteredVehicle[] @relation("modelToValue")
  registrationStatusToValue       RegisteredVehicle[] @relation("registrationStatusToValue")
  weaponRegistrationStatusToValue Weapon[]            @relation("weaponRegistrationStatusToValue")
  weaponModelToValue              Weapon[]            @relation("weaponModelToValue")
  employeeToValue                 Employee[]          @relation("employeeToValue")
}

enum ValueType {
  LICENSE
  GENDER
  ETHNICITY
  VEHICLE
  WEAPON
  BLOOD_GROUP
  BUSINESS_ROLE
}

// notifications
model Notification {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id])
  userId      String
  executor    User   @relation("executor", fields: [executorId], references: [id])
  executorId  String
  title       String
  description String
}

// bleeter
model BleeterPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String   @db.VarChar(255)
  body      String   @db.Text
  imageId   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
}

// tow
model TowCall {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  assignedUnit   Citizen? @relation(fields: [assignedUnitId], references: [id])
  assignedUnitId String?
  location       String   @db.VarChar(255)
  description    String   @db.Text
  creator        Citizen  @relation("towCallCreator", fields: [creatorId], references: [id])
  creatorId      String
}

// businesses
model Business {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  citizen   Citizen @relation(fields: [citizenId], references: [id])
  citizenId String

  name          String         @db.VarChar(255)
  whitelisted   Boolean        @default(false)
  address       String         @db.Text
  businessPosts BusinessPost[]
  createdAt     DateTime       @default(now())
  employees     Employee[]
}

model Employee {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  citizen    Citizen  @relation(fields: [citizenId], references: [id])
  citizenId  String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  role               Value   @relation("employeeToValue", fields: [roleId], references: [id])
  roleId             String
  employeeOfTheMonth Boolean
}

model BusinessPost {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  citizen    Citizen  @relation(fields: [citizenId], references: [id])
  citizenId  String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  title String @db.VarChar(255)
  body  String @db.Text
}

enum Feature {
  BLEETER
  TOW
  TAXI
  COURTHOUSE
  TRUCK_LOGS
  AOP
}
