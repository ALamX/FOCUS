// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

model cad {
  id                String           @id @default(cuid())
  name              String           @db.VarChar(255)
  owner             User             @relation(fields: [ownerId], references: [id])
  ownerId           String
  areaOfPlay        String?          @db.VarChar(255)
  steamApiKey       String?          @db.VarChar(255)
  whitelisted       Boolean          @default(false)
  towWhitelisted    Boolean          @default(false)
  maxPlateLength    Int              @default(8)
  liveMapSocketURl  String?          @db.VarChar(255)
  logoId            String?
  registrationCode  String?
  disabledFeatures  Feature[]
  miscCadSettings   MiscCadSettings? @relation(fields: [miscCadSettingsId], references: [id])
  miscCadSettingsId String?
}

model MiscCadSettings {
  id String @id @default(cuid())

  heightPrefix            String @default("cm") @db.VarChar(255)
  weightPrefix            String @default("kg") @db.VarChar(255)
  maxCitizensPerUser      Int?
  maxPlateLength          Int    @default(8)
  maxBusinessesPerCitizen Int?

  assignedStatusCode String @default("10-97")
  onDutyCode         String @default("10-8")
  cad                cad[]
}

model User {
  id              String          @id @default(cuid())
  username        String          @unique @db.VarChar(255)
  password        String          @db.Text
  rank            Rank            @default(USER)
  isLeo           Boolean         @default(false)
  isSupervisor    Boolean         @default(false)
  isEmsFd         Boolean         @default(false)
  isDispatch      Boolean         @default(false)
  isTow           Boolean         @default(false)
  banned          Boolean         @default(false)
  banReason       String?
  avatarUrl       String?         @db.Text
  steamId         String?         @db.VarChar(255)
  whitelistStatus WhitelistStatus @default(ACCEPTED)

  // relational data
  citizens             Citizen[]
  cads                 cad[]
  vehicles             RegisteredVehicle[]
  weapons              Weapon[]
  notifications        Notification[]
  executedNotifictions Notification[]      @relation("executor")
  medicalRecords       MedicalRecord[]
  bleeterPosts         BleeterPost[]
  towCalls             TowCall[]
  businesses           Business[]
  businessPosts        BusinessPost[]
  Employee             Employee[]
  officers             Officer[]
  Call911              Call911[]
  OfficerLog           OfficerLog[]
}

model Citizen {
  id               String              @id @default(cuid())
  user             User                @relation(fields: [userId], references: [id])
  userId           String
  name             String              @db.VarChar(255)
  surname          String              @db.VarChar(255)
  dateOfBirth      DateTime
  gender           Value               @relation("genderToValue", fields: [genderId], references: [id])
  genderId         String
  ethnicity        Value               @relation("ethnicityToValue", fields: [ethnicityId], references: [id])
  ethnicityId      String
  hairColor        String              @db.VarChar(255)
  eyeColor         String              @db.VarChar(255)
  address          String              @db.VarChar(255)
  height           String              @db.VarChar(255)
  weight           String              @db.VarChar(255)
  driversLicense   Value?              @relation("driversLicenseToValue", fields: [driversLicenseId], references: [id])
  driversLicenseId String?
  weaponLicense    Value?              @relation("weaponLicenseToValue", fields: [weaponLicenseId], references: [id])
  weaponLicenseId  String?
  pilotLicense     Value?              @relation("pilotLicenseToValue", fields: [pilotLicenseId], references: [id])
  pilotLicenseId   String?
  ccw              Value?              @relation("ccwToValue", fields: [ccwId], references: [id])
  ccwId            String?
  imageId          String?             @db.Text
  note             String?             @db.Text
  dead             Boolean?            @default(false)
  dateOfDead       DateTime?
  vehicles         RegisteredVehicle[]
  weapons          Weapon[]
  medicalRecords   MedicalRecord[]
  towCalls         TowCall[]
  createdTowCalls  TowCall[]           @relation("towCallCreator")
  businesses       Business[]
  Employee         Employee[]
  officers         Officer[]
  warrants         Warrant[]
  Record           Record[]
}

enum Rank {
  OWNER
  ADMIN
  MODERATOR
  USER
}

enum WhitelistStatus {
  ACCEPTED
  PENDING
  DECLINED
}

model RegisteredVehicle {
  id                   String   @id @default(cuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String
  citizen              Citizen  @relation(fields: [citizenId], references: [id])
  citizenId            String
  vinNumber            String   @unique @db.VarChar(255)
  plate                String   @unique @db.VarChar(255)
  model                Value    @relation("modelToValue", fields: [modelId], references: [id])
  modelId              String
  color                String   @db.VarChar(255)
  createdAt            DateTime @default(now())
  registrationStatus   Value    @relation("registrationStatusToValue", fields: [registrationStatusId], references: [id])
  registrationStatusId String
  insuranceStatus      String   @db.VarChar(255)
}

model Weapon {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  citizen   Citizen @relation(fields: [citizenId], references: [id])
  citizenId String

  serialNumber         String @unique @db.VarChar(255)
  registrationStatus   Value  @relation("weaponRegistrationStatusToValue", fields: [registrationStatusId], references: [id])
  registrationStatusId String
  model                Value  @relation("weaponModelToValue", fields: [modelId], references: [id])
  modelId              String
}

model MedicalRecord {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  citizen   Citizen @relation(fields: [citizenId], references: [id])
  citizenId String

  type        String @db.VarChar(255)
  description String @db.Text
}

// admin values
model Value {
  id        String    @id @default(cuid())
  type      ValueType
  value     String    @db.VarChar(255)
  isDefault Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // how to clean this up?!
  ethnicityToValue                Citizen[]           @relation("ethnicityToValue")
  genderToValue                   Citizen[]           @relation("genderToValue")
  driversLicenseToValue           Citizen[]           @relation("driversLicenseToValue")
  weaponLicenseToValue            Citizen[]           @relation("weaponLicenseToValue")
  pilotLicenseToValue             Citizen[]           @relation("pilotLicenseToValue")
  ccwToValue                      Citizen[]           @relation("ccwToValue")
  modelToValue                    RegisteredVehicle[] @relation("modelToValue")
  registrationStatusToValue       RegisteredVehicle[] @relation("registrationStatusToValue")
  weaponRegistrationStatusToValue Weapon[]            @relation("weaponRegistrationStatusToValue")
  weaponModelToValue              Weapon[]            @relation("weaponModelToValue")
  EmployeeValue                   EmployeeValue[]
  officerToValue                  Officer[]           @relation("officerDepartmentToValue")
  officerRankToValue              Officer[]           @relation("officerRankToValue")
  officerStatusValueToValue       StatusValue[]       @relation("officerStatusValueToValue")
  departmentToValue               DivisionValue[]     @relation("departmentToValue")
  divisionToValue                 DivisionValue[]     @relation("divisionToValue")
}

model PenalCode {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.VarChar(255)
  description String   @db.Text
  record      Record?  @relation(fields: [recordId], references: [id])
  recordId    String?
}

model DivisionValue {
  id           String    @id @default(cuid())
  value        Value     @relation("divisionToValue", fields: [valueId], references: [id], onDelete: Cascade)
  valueId      String
  department   Value?    @relation("departmentToValue", fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?
  officers     Officer[] @relation("officerDivisionToDivision")
}

enum ValueType {
  LICENSE
  GENDER
  ETHNICITY
  VEHICLE
  WEAPON
  BLOOD_GROUP
  BUSINESS_ROLE
  CODES_10
  PENAL_CODE
  DEPARTMENT
  OFFICER_RANK
  DIVISION
}

// notifications
model Notification {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id])
  userId      String
  executor    User   @relation("executor", fields: [executorId], references: [id])
  executorId  String
  title       String
  description String
}

// bleeter
model BleeterPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String   @db.VarChar(255)
  body      String   @db.Text
  imageId   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
}

// tow
model TowCall {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  assignedUnit   Citizen? @relation(fields: [assignedUnitId], references: [id])
  assignedUnitId String?
  location       String   @db.VarChar(255)
  description    String   @db.Text
  creator        Citizen  @relation("towCallCreator", fields: [creatorId], references: [id])
  creatorId      String
}

// businesses
model Business {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  citizen   Citizen @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String

  name          String         @db.VarChar(255)
  whitelisted   Boolean        @default(false)
  address       String         @db.Text
  businessPosts BusinessPost[]
  createdAt     DateTime       @default(now())
  employees     Employee[]
}

model Employee {
  id                 String          @id @default(cuid())
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  citizen            Citizen         @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId          String
  business           Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId         String
  role               EmployeeValue?  @relation("employeeToValue", fields: [roleId], references: [id], onDelete: Restrict)
  roleId             String?
  employeeOfTheMonth Boolean         @default(false)
  canCreatePosts     Boolean         @default(true)
  whitelistStatus    WhitelistStatus @default(ACCEPTED)
  businessPosts      BusinessPost[]
}

model BusinessPost {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  title     String   @db.VarChar(255)
  body      String   @db.Text
  createdAt DateTime @default(now())
}

model EmployeeValue {
  id        String         @id @default(cuid())
  value     Value          @relation(fields: [valueId], references: [id], onDelete: Cascade)
  valueId   String
  as        EmployeeAsEnum @default(EMPLOYEE)
  employees Employee[]     @relation("employeeToValue")
}

enum EmployeeAsEnum {
  OWNER
  MANAGER
  EMPLOYEE
}

// leo
model Officer {
  id           String        @id @default(cuid())
  name         String        @db.VarChar(255)
  department   Value         @relation("officerDepartmentToValue", fields: [departmentId], references: [id])
  departmentId String
  callsign     String        @db.VarChar(255)
  division     DivisionValue @relation("officerDivisionToDivision", fields: [divisionId], references: [id])
  divisionId   String
  rank         Value?        @relation("officerRankToValue", fields: [rankId], references: [id])
  rankId       String?
  status       StatusEnum    @default(OFF_DUTY)
  status2      StatusValue?  @relation("officer2StatusToValue", fields: [status2Id], references: [id])
  status2Id    String?
  suspended    Boolean       @default(false)
  badgeNumber  Int?

  citizen   Citizen?     @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String?
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  call911   Call911?     @relation("call911ToOfficer", fields: [call911Id], references: [id])
  call911Id String?
  bolos     Bolo[]       @relation("bolosToOfficer")
  warrants  Warrant[]
  logs      OfficerLog[]
  Record    Record[]
}

model StatusValue {
  id        String       @id @default(uuid())
  value     Value        @relation("officerStatusValueToValue", fields: [valueId], references: [id], onDelete: Cascade)
  valueId   String
  shouldDo  ShouldDoType @default(SET_STATUS)
  position  Int?
  whatPages WhatPages[]


  officer2StatusToValue Officer[] @relation("officer2StatusToValue")
}

model OfficerLog {
  id        String    @id @default(uuid())
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  officer   Officer   @relation(fields: [officerId], references: [id])
  officerId String
}

enum StatusEnum {
  ON_DUTY
  OFF_DUTY
}

enum WhatPages {
  DISPATCH
  EMS_FD
  LEO
}

enum ShouldDoType {
  SET_OFF_DUTY
  SET_STATUS
}

// 911 calls & bolos
model Call911 {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  assignedUnits   Officer[] @relation("call911ToOfficer")
  assignedUnitsId String?
  location        String    @db.Text
  description     String    @db.Text
  name            String    @db.VarChar(255)
}

model Bolo {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        BoloType
  description String   @db.Text
  plate       String?  @db.VarChar(255)
  name        String?  @db.VarChar(255)
  color       String?  @db.VarChar(255)
  officer     Officer  @relation("bolosToOfficer", fields: [officerId], references: [id])
  officerId   String
}

enum BoloType {
  VEHICLE
  PERSON
  OTHER
}

// tickets, arrest reports, warrants, written warnings
model Record {
  id         String      @id @default(uuid())
  type       RecordType
  citizen    Citizen     @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId  String
  officer    Officer     @relation(fields: [officerId], references: [id], onDelete: Cascade)
  officerId  String
  violations PenalCode[]
  createdAt  DateTime    @default(now())
  postal     String      @db.VarChar(255)
  notes      String?     @db.Text
}

enum RecordType {
  ARREST_REPORT
  TICKET
  WRITTEN_WARNING
}

model Warrant {
  id          String        @id @default(uuid())
  citizen     Citizen       @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId   String
  officer     Officer       @relation(fields: [officerId], references: [id], onDelete: Cascade)
  officerId   String
  description String        @db.Text
  status      WarrantStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
}

enum WarrantStatus {
  ACTIVE
  INACTIVE
}

// other
enum Feature {
  BLEETER
  TOW
  TAXI
  COURTHOUSE
  TRUCK_LOGS
  AOP
  BUSINESS
}
